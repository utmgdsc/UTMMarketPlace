openapi: 3.0.0
info:
  title: UTM Marketplace API
  description: API specification for a campus-wide marketplace app
  version: 1.0.0

servers:
  - url: https://api.utmmarketplace.com
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

paths:
  /sign-up:
    post:
      summary: Sign up a new user
      description: Registers a new user using an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpPostRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpPostResponse"
        "400":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - Email already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listings:
    get:
      summary: Retrieve all listings
      parameters:
        - name: limit
          in: query
          description: >-
            Number of listings per page. Invalid values will be mapped to a
            number between 1 and 30.
          required: false
          deprecated: false
          schema:
            type: integer
          allowEmptyValue: false
        - name: next
          in: query
          description: The last seen pagination token
          required: false
          deprecated: false
          schema:
            type: string
          allowEmptyValue: false
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsGetResponseAll"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    
    post:
      summary: Create a new listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingsPostRequest"
      responses:
        "201":
          description: Listing created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsPostResponse"
        "422":
          description: Validation error - Missing/incorrect required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listing:
    get:
      summary: Retrieve a single listing by ID
      parameters:
        - name: listing_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Listing retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingGetResponseItem"
        "400":
          description: Invalid listing ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Invalid Input body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  

  /login:
    post:
      summary: Log in a user
      description: Log in a existing user using a email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInPostRequest"
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogInPostResponse"
        "400":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Invalid Input body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /search:
    get:
      summary: search listings
      description: send a search query to the backend and return matching listings.
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: can be left blank so that other filters can be applied independently
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 30
          description: number of listings to retrieve
        - name: next
          in: query
          required: false
          schema:
            type: string
          description: last seen pagination token
        - name: price_type
          in: query
          required: false
          schema:
            type: string
          description: type of sorting i.e high -> low or low -> high
        - name: lower_price
          in: query
          required: false
          schema:
            type: integer
          description: lower limit for price filter
        - name: upper_price
          in: query
          required: false
          schema:
            type: integer
          description: upper limit for price filter
        - name: condition
          in: query
          required: false
          schema:
            type: string
          description: type of condition i.e New, Used, fair, etc
        - name: date_range
          in: query
          required: false
          schema:
            type: string
          description: earlier date for date filtering
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchGetResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  

  /saved_items:
    post:
      summary: Save a listing to a users saved posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavedItemsPostRequest"
      responses:
        "201":
          description: Post saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedItemsPostResponse"
        "422":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Retrieve saved items for a user
      parameters:
        - name: user_id
          in: query
          required: true
          description: The unique identifier of the user whose saved items are being retrieved.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of saved items per page.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: next
          in: query
          required: false
          description: Pagination token to retrieve the next set of results
          schema:
            type: string
      responses:
        "200":
          description: Saved listings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  saved_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListingGetResponseItem"
                  total:
                    tpye: integer
                example:
                  saved_items:
                  - id: "1"
                    title: "MacBook Pro for sale"
                    price: 1200.99
                    description: "Selling my MacBook Pro in great condition!"
                    seller_id: "101"
                    pictures: ["https://example.com/image1.jpg"]
                    category: "Electronics"
                    condition: "Used"
                    date_posted: "2025-02-22T10:00:00Z"
                    campus: "UTM"
                    total: 1
        "400":
          description: Bad Request - Missing or invalid user_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  
    delete:
      summary: Delete a saved item
      description: Remove a listing from a user's saved items collection.
      parameters:
        - name: saved_item_id
          in: path
          required: true
          description: The unique identifier of the saved item to delete.
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: The unique identifier of the user who owns the saved item.
          schema:
            type: string
      responses:
        "200":
          description: Saved item successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Saved item deleted successfully."
        "400":
          description: Bad Request - Missing or invalid saved_item_id or user_id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Saved item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    /conversations:
    get:
      summary: Retrieve user conversations
      description: Returns a list of conversations the user is involved in.
      parameters:
        - name: user_id
          in: query
          required: true
          description: The ID of the user whose conversations are being retrieved.
          schema:
            type: string
      responses:
        "200":
          description: A list of user conversations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      type: object
                      properties:
                        conversation_id:
                          type: string
                        participant_ids:
                          type: array
                          items:
                            type: string
                        last_message:
                          type: string
                        last_timestamp:
                          type: string
                          format: date-time
                example:
                  conversations:
                    - conversation_id: "abc123"
                      participant_ids: ["101", "202"]
                      last_message: "See you soon!"
                      last_timestamp: "2025-04-04T18:00:00Z"
        "400":
          description: Missing or invalid user_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /messages:
    post:
      summary: Send a message
      description: Create and send a new message from one user to another.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagesPostRequest"
      responses:
        "201":
          description: Message sent successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesPostResponse"
        "422":
          description: Bad Request - Missing or invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
        summary: Retrieve messages between two users
        description: Retrieve a list of messages exchanged between a sender and a recipient.
        parameters:
          - name: sender_id
            in: query
            required: true
            description: The unique identifier of the sender.
            schema:
              type: string
          - name: recipient_id
            in: query
            required: true
            description: The unique identifier of the recipient.
            schema:
              type: string
        responses:
          "200":
            description: A list of messages exchanged between the specified users.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    messages:
                      type: array
                      items:
                        $ref: "#/components/schemas/MessageGetResponseItem"
                    total:
                      type: integer
                  example:
                    messages:
                      - message_id: "501"
                        sender_id: "101"
                        recipient_id: "202"
                        content: "Hello, how are you?"
                        timestamp: "2025-03-25T14:00:00Z"
                      - message_id: "502"
                        sender_id: "202"
                        recipient_id: "101"
                        content: "I'm good, thanks for asking!"
                        timestamp: "2025-03-25T14:05:00Z"
                    total: 2
          "400":
            description: Bad Request - Missing or invalid query parameters.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          "404":
            description: No messages found for the specified query.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          "500":
            description: Internal Server Error.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /conversations:
    get:
      summary: Retrieve user conversations
      description: Returns a list of conversations the user is involved in.
      parameters:
        - name: user_id
          in: query
          required: true
          description: The ID of the user whose conversations are being retrieved.
          schema:
            type: string
      responses:
        "200":
          description: A list of user conversations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      type: object
                      properties:
                        conversation_id:
                          type: string
                        participant_ids:
                          type: array
                          items:
                            type: string
                        last_message:
                          type: string
                        last_timestamp:
                          type: string
                          format: date-time
                example:
                  conversations:
                    - conversation_id: "abc123"
                      participant_ids: ["101", "202"]
                      last_message: "See you soon!"
                      last_timestamp: "2025-04-04T18:00:00Z"
        "400":
          description: Missing or invalid user_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /settings:
    put:
      summary: Update user settings
      description: Update the settings for a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsPutRequest"
      responses:
        "200":
          description: Settings updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsPutResponse"
        "422":
          description: Bad Request - Missing or invalid settings data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user:
    get:
      summary: Get user details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGetResponse"
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400":
          description: Invalid id format
          content:
            application/json:
              schema:
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update User details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPutRequest"
      responses:
        "201":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400":
          description: Invalid id format or invalid email input format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Unauthorized (user mismatch)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - details
      properties:
        details:
          type: string
    
    SignUpPostRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
        password:
          type: string
          format: password
          description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      example:
        email: "student@utoronto.ca"
        password: "P@ssword123"
    
    LogInPostRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
        password:
          type: string
          format: password
          description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      example:
        email: "student@utoronto.ca"
        password: "P@ssword123"
    
    LogInPostResponse:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
        message:
          type: string
      example:
        user_id: 42
        message: "User logged in successfully."  
    
    SignUpPostResponse:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
        message:
          type: string
      example:
        user_id: 42
        message: "User registered successfully."  
    
    SearchGetResponse:
      type: object
      required:
        - query
      properties:
        listings:
          type: array
          items:
            $ref: "#/components/schemas/ListingGetResponseItem"
        total:
          type: integer

    ListingGetResponseItem:
      type: object
      required:
        - id
        - title
        - price
        - seller_id
        - pictures
        - condition
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
        category:
          type: string
        condition:
          type: string
        date_posted:
          type: string
          format: date-time
        campus:
          type: string
      example:
        id: "1"
        title: "MacBook Pro for sale"
        price: 1200.99
        description: "Selling my MacBook Pro in great condition!"
        seller_id: "101"
        pictures: ["https://example.com/image1.jpg"]
        category: "Electronics"
        condition: "Used"
        date_posted: "2025-02-22T10:00:00Z"
        campus: "UTM"
    
    ListingsGetResponseAll:
      type: object
      properties:
        listings:
          type: array
          items:
            $ref: "#/components/schemas/ListingGetResponseItem"
        total:
          type: integer
    
    ListingsPostRequest:
      type: object
      required:
        - seller_id
        - title
        - price
        - pictures
        - condition
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
            description: base64-encoded image 
        category:
          type: string
        condition:
          type: string
        campus:
          type: string
      example:
        title: "Gaming Laptop for sale"
        price: 899.99
        description: "Lightly used gaming laptop, great condition!"
        seller_id: "101"
        pictures: ["<base64_string_1>", "<base64_string_2>"]
        category: "Electronics"
        condition: "Used"
        campus: "UTM"
    
    ListingsPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
        category:
          type: string
        condition:
          type: string
        date_posted:
          type: string
          format: date-time
        campus:
          type: string
      example:
        id: "10"
        title: "Gaming Laptop for sale"
        price: 899.99
        description: "Lightly used gaming laptop, great condition!"
        seller_id: "101"
        pictures: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        category: "Electronics"
        condition: "Used"
        date_posted: "2025-02-22T10:00:00Z"
        campus: "UTM"
    
    SavedItemsPostRequest:
      type: object
      required:
        - user_id
        - id
      properties:
        user_id:
          type: integer
          format: id
          description: "Must be a id linking to a registered and logged in user"
        id:
          type: integer
          format: id
          description: "Must be id linking to a listing"
      example:
        user_id: 1001
        id: 1

    SavedItemsPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
        message:
          type: string
      example:
        id: 1
        message: "Post saved successfully"

    MessagesPostRequest:
      type: object
      required:
        - sender_id
        - recipient_id
        - content
      properties:
        sender_id:
          type: string
          description: The unique identifier of the user sending the message.
        recipient_id:
          type: string
          description: The unique identifier of the user receiving the message.
        content:
          type: string
          description: The content of the message.
      example:
        sender_id: "101"
        recipient_id: "202"
        content: "Hello, is this still available?"

    MessagesPostResponse:
      type: object
      required:
        - message_id
      properties:
        message_id:
          type: string
          description: The unique identifier of the created message.
        message:
          type: string
          description: Confirmation message.
      example:
        message_id: "501"
        message: "Message sent successfully."

    MessageGetResponseItem:
      type: object
      required:
        - message_id
        - sender_id
        - recipient_id
        - content
        - timestamp
      properties:
        message_id:
          type: string
          description: Unique identifier for the message.
        sender_id:
          type: string
          description: Identifier for the user who sent the message.
        recipient_id:
          type: string
          description: Identifier for the user who received the message.
        content:
          type: string
          description: The content of the message.
        timestamp:
          type: string
          format: date-time
          description: The time when the message was sent.

    SettingsPutRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          description: The unique identifier of the user whose settings are being updated.
        notifications:
          type: boolean
          description: Flag indicating whether notifications are enabled.
        theme:
          type: string
          description: The UI theme preference (e.g., "light" or "dark").
        text_size:
          type: integer
          description: The preferred text font size.
      example:
        user_id: "101"
        notifications: true
        theme: "dark"
        text_size: 12
    
    SettingsPutResponse:
      type: object
      properties:
        user_id:
          type: string
          description: The unique identifier of the user.
        notifications:
          type: boolean
          description: Current notification setting.
        theme:
          type: string
          description: Current UI theme preference.
        text_size:
          type: integer
          description: Current text size setting.
        message:
          type: string
          description: Confirmation message.
      example:
        user_id: "101"
        notifications: true
        theme: "dark"
        text_size: 12
        message: "User settings updated successfully."
    UserGetResponse:    
      type: object
      required:
        - display_name
        - user_id
        - rating
        - rating_count
      properties:
        display_name:
          type: str
        profile_picture:
          type: str
        email:
          type: email
        user_id:
          type: str
        location:
          type: str
        rating: 
          type: float
        rating_count:
          type: int 
        saved_posts:
          type: array
          items:
            type: string
      example:
        display_name: "John"
        user_id: "101"
        profile_picture: "https://example.com/image1.jpg"
        location: "Toronto"
        rating: 4.2
        rating_count: 6
    UserPutRequest:
      type: object
      properties:
        display_name:
          type: str
        profile_picture:
          type: str
        email:
          type: email
        location:
          type: str
      example:
        display_name: "Drake"
        profile_picture: "https://example.com/image1.jpg"
        email: zesty123@utoronto.ca
        location: "Toronto"
    UserPutResponse:  
      type: object
      required:
      properties:
        display_name:
          type: str
        profile_picture:
          type: str
        email:
          type: email
        user_id:
          type: str
        location:
          type: str
      example:
        display_name: "John"
        user_id: "101"
        profile_picture: "https://example.com/image1.jpg"
        location: "Toronto"
  