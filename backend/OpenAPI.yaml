openapi: 3.0.0
info:
  title: UTM Marketplace API
  description: API specification for a campus-wide marketplace app
  version: 1.0.0

servers:
  - url: https://api.utmmarketplace.com
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

paths:
  /sign-up:
    post:
      summary: Sign up a new user
      description: Registers a new user using an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@utoronto.ca"
                  description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
                password:
                  type: string
                  format: password
                  example: "P@ssword123"
                  description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: integer
                    example: 42
                  message:
                    type: string
                    example: "User registered successfully."
        "400":
          description: Bad Request - Invalid email or password format
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: "Invalid email format. Please use a UofT email."
        "409":
          description: Conflict - Email already in use
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: "Email already registered."

  /listings:
      get:
        summary: Retrieve all listings
        responses:
          "200":
            description: A list of marketplace listings
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ListingsGetAllResponse"
          "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/500ErrorResponse"
      
      post:
        summary: Create a new listing
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsPostRequest"
        responses:
          "201":
            description: Listing created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ListingsPostResponse"
          "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/500ErrorResponse"

  /listing:
      get:
        summary: Retrieve a single listing by ID
        parameters:
          - name: listingid
            in: query
            required: true
            schema:
              type: string
              example: "65d53a49c2c5f2b9e8e1d4b5"
        responses:
          "200":
            description: Listing retrieved successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ListingsGetResponseItem"
          "400":
            description: Invalid listing ID format
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Invalid listing ID format. Must be a valid ObjectId."
          "404":
            description: Listing not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Listing not found."
          "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/500ErrorResponse"

components:
  schemas:
    500ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Internal Server Error. Please try again later."
    ListingsGetResponseItem:
      type: object
      required:
        - id
        - title
        - price
        - seller_id
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "MacBook Pro for sale"
        price:
          type: number
          format: float
          example: 1200.99
        description:
          type: string
          example: "Selling my MacBook Pro in great condition!"
        seller_id:
          type: string
          example: "101"
        pictures:
          type: array
          items:
            type: string
            example: "https://example.com/image1.jpg"
        category:
          type: string
          example: "Electronics"
        date_posted:
          type: string
          format: date-time
          example: "2025-02-22T10:00:00Z"
        campus:
          type: string
          example: "UTM"
    ListingsGetAllResponse:
      type: object
      properties:
        listings:
          type: array
          items:
            $ref: "#/components/schemas/ListingsGetResponseItem"
        total:
          type: integer
          example: 10
    ListingsPostRequest:
      type: object
      required:
        - seller_id
        - title
        - price
        - campus
      properties:
        title:
          type: string
          example: "Gaming Laptop for sale"
        price:
          type: number
          format: float
          example: 899.99
        description:
          type: string
          example: "Lightly used gaming laptop, great condition!"
        seller_id:
          type: string
          example: "101"
        pictures:
          type: array
          items:
            type: string
            example: "https://example.com/image1.jpg"
        category:
          type: string
          example: "Electronics"
        date_posted:
          type: string
          format: date-time
          example: "2025-02-22T10:00:00Z"
        campus:
          type: string
          example: "UTM"
    ListingsPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "10"
        title:
          type: string
          example: "Gaming Laptop for sale"
        price:
          type: number
          format: float
          example: 899.99
        description:
          type: string
          example: "Lightly used gaming laptop, great condition!"
        seller_id:
          type: string
          example: "101"
        pictures:
          type: array
          items:
            type: string
            example: "https://example.com/image1.jpg"
        category:
          type: string
          example: "Electronics"
        date_posted:
          type: string
          format: date-time
          example: "2025-02-22T10:00:00Z"
        campus:
          type: string
          example: "UTM"