openapi: 3.0.0
info:
  title: UTM Marketplace API
  description: API specification for a campus-wide marketplace app
  version: 1.0.0

servers:
  - url: https://api.utmmarketplace.com
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

paths:
  /sign-up:
    post:
      summary: Sign up a new user
      description: Registers a new user using an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpPostRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpPostResponse"
        "400":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - Email already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listings:
    get:
      summary: Retrieve all listings
      parameters:
        - name: limit
          in: query
          description: >-
            Number of listings per page. Invalid values will be mapped to a
            number between 1 and 30.
          required: false
          deprecated: false
          schema:
            type: integer
          allowEmptyValue: false
        - name: next
          in: query
          description: The last seen pagination token
          required: false
          deprecated: false
          schema:
            type: string
          allowEmptyValue: false
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsGetResponseAll"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    
    post:
      summary: Create a new listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingsPostRequest"
      responses:
        "201":
          description: Listing created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsPostResponse"
        "422":
          description: Validation error - Missing/incorrect required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listing:
    get:
      summary: Retrieve a single listing by ID
      parameters:
        - name: listing_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Listing retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingGetResponseItem"
        "400":
          description: Invalid listing ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Invalid Input body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  
  /login:
    post:
      summary: Log in a user
      description: Log in a existing user using a email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInPostRequest"
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogInPostResponse"
        "400":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Invalid Input body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /search:
    get:
      summary: search listings
      description: send a search query to the backend and return matching listings.
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: can be left blank so that other filters can be applied independently
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 30
          description: number of listings to retrieve
        - name: next
          in: query
          required: false
          schema:
            type: string
          description: last seen pagination token
        - name: price_type
          in: query
          required: false
          schema:
            type: string
          description: type of sorting i.e high -> low or low -> high
        - name: lower_price
          in: query
          required: false
          schema:
            type: integer
          description: lower limit for price filter
        - name: upper_price
          in: query
          required: false
          schema:
            type: integer
          description: upper limit for price filter
        - name: condition
          in: query
          required: false
          schema:
            type: string
          description: type of condition i.e New, Used, fair, etc
        - name: date_range
          in: query
          required: false
          schema:
            type: str
          description: earlier date for date filtering
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchGetResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  

components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - details
      properties:
        details:
          type: string
    
    SignUpPostRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
        password:
          type: string
          format: password
          description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      example:
        email: "student@utoronto.ca"
        password: "P@ssword123"
    
    LogInPostRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
        password:
          type: string
          format: password
          description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      example:
        email: "student@utoronto.ca"
        password: "P@ssword123"
    
    LogInPostResponse:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
        message:
          type: string
      example:
        user_id: 42
        message: "User logged in successfully."  
    
    SignUpPostResponse:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
        message:
          type: string
      example:
        user_id: 42
        message: "User registered successfully."  
    
    SearchGetResponse:
      type: object
      required:
        - query
      properties:
        listings:
          type: array
          items:
            $ref: "#/components/schemas/ListingGetResponseItem"
        total:
          type: integer

    ListingGetResponseItem:
      type: object
      required:
        - id
        - title
        - price
        - seller_id
        - pictures
        - condition
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
        category:
          type: string
        condition:
          type: string
        date_posted:
          type: string
          format: date-time
        campus:
          type: string
      example:
        id: "1"
        title: "MacBook Pro for sale"
        price: 1200.99
        description: "Selling my MacBook Pro in great condition!"
        seller_id: "101"
        pictures: ["https://example.com/image1.jpg"]
        category: "Electronics"
        condition: "Used"
        date_posted: "2025-02-22T10:00:00Z"
        campus: "UTM"
    
    ListingsGetResponseAll:
      type: object
      properties:
        listings:
          type: array
          items:
            $ref: "#/components/schemas/ListingGetResponseItem"
        total:
          type: integer
    
    ListingsPostRequest:
      type: object
      required:
        - seller_id
        - title
        - price
        - pictures
        - condition
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
        category:
          type: string
        condition:
          type: string
        campus:
          type: string
      example:
        title: "Gaming Laptop for sale"
        price: 899.99
        description: "Lightly used gaming laptop, great condition!"
        seller_id: "101"
        pictures: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        category: "Electronics"
        condition: "Used"
        campus: "UTM"
    
    ListingsPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        seller_id:
          type: string
        pictures:
          type: array
          items:
            type: string
        category:
          type: string
        condition:
          type: string
        date_posted:
          type: string
          format: date-time
        campus:
          type: string
      example:
        id: "10"
        title: "Gaming Laptop for sale"
        price: 899.99
        description: "Lightly used gaming laptop, great condition!"
        seller_id: "101"
        pictures: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        category: "Electronics"
        condition: "Used"
        date_posted: "2025-02-22T10:00:00Z"
        campus: "UTM"
