openapi: 3.0.0
info:
  title: UTM Marketplace API
  description: API specification for a campus-wide marketplace app
  version: 1.0.0

servers:
  - url: https://api.utmmarketplace.com
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

paths:
paths:
  /sign-up:
    post:
      summary: Sign up a new user
      description: Registers a new user using an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@utoronto.ca"
                  description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
                password:
                  type: string
                  format: password
                  example: "P@ssword123"
                  description: "Must be at least 8 characters, contain 1 uppercase letter, 1 number."
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: string  # Changed from integer to string (ObjectId format)
                    example: "65d53a49c2c5f2b9e8e1d4b5"
                  message:
                    type: string
                    example: "User registered successfully."
        "400":
          description: Bad Request - Invalid email or password format
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: "Invalid email format. Please use a UofT email."
        "409":
          description: Conflict - Email already in use
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: "Email already registered."

  /listings:
    get:
      summary: Retrieve all listings
      description: Fetches all product/service listings available in the marketplace.
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    listing_id:
                      type: string  # Changed from integer to string (ObjectId format)
                      example: "65d53a49c2c5f2b9e8e1d4b5"
                    title:
                      type: string
                      example: "MacBook Pro for sale"
                    price:
                      type: number
                      format: float
                      example: 1200.99
                    description:
                      type: string
                      example: "Selling my MacBook Pro in great condition!"
                    seller_id:
                      type: string  # Changed from integer to string
                      example: "12345"

    post:
      summary: Create a new listing
      description: Adds a new product or service listing to the marketplace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Gaming Laptop for sale"
                price:
                  type: number
                  format: float
                  example: 899.99
                description:
                  type: string
                  example: "Lightly used gaming laptop, great condition!"
                seller_id:
                  type: string  # Changed from integer to string
                  example: "101"
      responses:
        "201":
          description: Listing created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  listing_id:
                    type: string  # Changed from integer to string (ObjectId format)
                    example: "65d53a49c2c5f2b9e8e1d4b5"
                  message:
                    type: string
                    example: "Listing created successfully."

  /listing:
    get:
      summary: Retrieve a single listing by ID
      description: Fetches details of a specific listing using its `listingid`.
      parameters:
        - name: listingid
          in: query
          required: true
          schema:
            type: string
            example: "65d53a49c2c5f2b9e8e1d4b5"
          description: "The unique ID of the listing (MongoDB ObjectId format)."
      responses:
        "200":
          description: Listing retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  listing_id:
                    type: string
                    example: "65d53a49c2c5f2b9e8e1d4b5"
                  title:
                    type: string
                    example: "Gaming Laptop for sale"
                  price:
                    type: number
                    format: float
                    example: 899.99
                  description:
                    type: string
                    example: "Lightly used gaming laptop, great condition!"
                  seller_id:
                    type: string
                    example: "101"

        "400":
          description: Invalid listing ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid listing ID format. Must be a valid ObjectId."
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Listing not found."