openapi: 3.0.0
info:
  title: UTM Marketplace API
  description: API specification for a campus-wide marketplace app
  version: 1.0.0

servers:
  - url: https://api.utmmarketplace.com
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

paths:
  /sign-up:
    post:
      summary: Sign up a new user
      description: Registers a new user using an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@utoronto.ca"
                  description: "Must be a valid University of Toronto email (utoronto.ca or mail.utoronto.ca)."
                password:
                  type: string
                  format: password
                  example: "P@ssword123"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  user_id
                properties:
                  user_id:
                    type: integer
                    example: 42
                  message:
                    type: string
                    example: "User registered successfully."
        "400":
          description: Bad Request - Invalid email or password format
          content:
            application/json:
              schema:
                type: object
              properties:
                error_code:
                  type: string
                  example: "INVALID_INPUT"
                message:
                  type: string
                  example: "Invalid email or password"
                details:
                  type: string
                  example: "Email must be a valid University of Toronto email"

        "409":
          description: Conflict - Email already in use
          content:
            application/json:
            schema:
              type: object
            properties:
              error_code:
                type: string
                example: "EMAIL_ALREADY_IN_USE"
              message:
                type: string
                example: "The email address is already registered."
              details:
                type: string
                example: "Please use a different email address of log in."
        "500":
          description: Internal Server Error
          content:
            application/json:
            schema:
              type: object
            properties:
              error_codE:
                type: string
                example: "INTERNAL_SERVER_ERROR"
              message:
                type: string
                example: "An unexpected error occurred."
                details:
                  type: string
                  example: "Please try again later or contact support."
  /login:
    post:
      summary: Log in an existing user
      description: Authenticates a user using email and password. Returns a JWT token if valid credentials are provided.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@utoronto.ca"
                password:
                  type: string
                  format: password
                  example: "P@ssword123"
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
                  token_type:
                    type: string
                    example: "bearer"
        "401":
          description: Unauthorized - Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "Invalid email or password."
                  details:
                    type: string
                    example: "Please check your credentials and try again."
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "An unexpected error occurred."
                  details:
                    type: string
                    example: "Please try again later or contact support."

  /listings:
    get:
      summary: Retrieve all listings
      description: Fetches all product/service listings available in the marketplace.
      responses:
        "200":
          description: A list of marketplace listings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "Gaming Laptop for sale"
                    price:
                      type: number
                      format: float
                      example: 899.99
                    description:
                      type: string
                      example: "Lightly used gaming laptop, great condition!"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "An unexpected error occurred."
                  details:
                    type: string
                    example: "Please try again later or contact support."
    post:
      summary: Create a new listing
      description: Adds a new product or service listing to the marketplace.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Gaming Laptop for sale"
                price:
                  type: number
                  format: float
                  example: 899.99
                description:
                  type: string
                  example: "Lightly used gaming laptop, great condition!"
      responses:
        "201":
          description: Listing created successfully
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "An unexpected error occurred."
                  details:
                    type: string
                    example: "Please try again later or contact support."


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT