# generated by fastapi-codegen:
#   filename:  OpenAPI.yaml
#   timestamp: 2025-04-08T03:05:12+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI
from pydantic import conint

from .models import (
    ConversationsGetResponse,
    ErrorResponse,
    ListingGetResponseItem,
    ListingsGetResponseAll,
    ListingsPostRequest,
    ListingsPostResponse,
    LogInPostRequest,
    LogInPostResponse,
    MessagesGetResponse,
    MessagesPostRequest,
    MessagesPostResponse,
    ReviewGetResponse,
    ReviewPostRequest,
    ReviewPostResponse,
    SavedItemsDeleteResponse,
    SavedItemsGetResponse,
    SavedItemsPostRequest,
    SavedItemsPostResponse,
    SearchGetResponse,
    SettingsPutRequest,
    SettingsPutResponse,
    SignUpPostRequest,
    SignUpPostResponse,
    UserGetResponse,
    UserPutRequest,
)

app = FastAPI(
    title='UTM Marketplace API',
    description='API specification for a campus-wide marketplace app',
    version='1.0.0',
    servers=[
        {'url': 'https://api.utmmarketplace.com', 'description': 'Production Server'},
        {'url': 'http://localhost:5000', 'description': 'Local Development Server'},
    ],
)


@app.get(
    '/conversations',
    response_model=ConversationsGetResponse,
    responses={
        '400': {'model': ErrorResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['messages'],
)
def get_conversations(user_id: str) -> Union[ConversationsGetResponse, ErrorResponse]:
    """
    Retrieve user conversations
    """
    pass


@app.get(
    '/listing',
    response_model=ListingGetResponseItem,
    responses={
        '400': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['listings'],
)
def get_listing(listing_id: str) -> Union[ListingGetResponseItem, ErrorResponse]:
    """
    Retrieve a single listing by ID
    """
    pass


@app.get(
    '/listings',
    response_model=ListingsGetResponseAll,
    responses={'500': {'model': ErrorResponse}},
    tags=['listings'],
)
def get_listings(
    limit: Optional[int] = None, next: Optional[str] = None
) -> Union[ListingsGetResponseAll, ErrorResponse]:
    """
    Retrieve all listings
    """
    pass


@app.post(
    '/listings',
    response_model=None,
    responses={
        '201': {'model': ListingsPostResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['listings'],
)
def post_listings(
    body: ListingsPostRequest,
) -> Optional[Union[ListingsPostResponse, ErrorResponse]]:
    """
    Create a new listing
    """
    pass


@app.post(
    '/login',
    response_model=LogInPostResponse,
    responses={'400': {'model': ErrorResponse}, '422': {'model': ErrorResponse}},
    tags=['authentication'],
)
def post_login(body: LogInPostRequest) -> Union[LogInPostResponse, ErrorResponse]:
    """
    Log in a user
    """
    pass


@app.post(
    '/messages',
    response_model=None,
    responses={
        '201': {'model': MessagesPostResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['messages'],
)
def post_messages(
    body: MessagesPostRequest,
) -> Optional[Union[MessagesPostResponse, ErrorResponse]]:
    """
    Send a message
    """
    pass


@app.get(
    '/messages',
    response_model=MessagesGetResponse,
    responses={
        '400': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['messages'],
)
def get_messages(
    user1: str, user2: str = ...
) -> Union[MessagesGetResponse, ErrorResponse]:
    """
    Retrieve messages between two users
    """
    pass


@app.post(
    '/reviews',
    response_model=None,
    responses={
        '201': {'model': ReviewPostResponse},
        '400': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['reviews'],
)
def post_reviews(
    body: ReviewPostRequest,
) -> Optional[Union[ReviewPostResponse, ErrorResponse]]:
    """
    Create a review for a seller
    """
    pass


@app.get(
    '/reviews',
    response_model=ReviewGetResponse,
    responses={
        '400': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['reviews'],
)
def get_reviews(seller_id: str) -> Union[ReviewGetResponse, ErrorResponse]:
    """
    Get reviews for a seller
    """
    pass


@app.post(
    '/saved_items',
    response_model=None,
    responses={
        '201': {'model': SavedItemsPostResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['saved_items'],
)
def post_saved_items(
    body: SavedItemsPostRequest,
) -> Optional[Union[SavedItemsPostResponse, ErrorResponse]]:
    """
    Save a listing to a users saved posts
    """
    pass


@app.get(
    '/saved_items',
    response_model=SavedItemsGetResponse,
    responses={
        '400': {'model': ErrorResponse},
        '401': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['saved_items'],
)
def get_saved_items() -> Union[SavedItemsGetResponse, ErrorResponse]:
    """
    Retrieve saved items for a user. User id is determined based on JWT.
    """
    pass


@app.delete(
    '/saved_items',
    response_model=SavedItemsDeleteResponse,
    responses={
        '400': {'model': ErrorResponse},
        '401': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['saved_items'],
)
def delete_saved_items(
    saved_item_id: str,
) -> Union[SavedItemsDeleteResponse, ErrorResponse]:
    """
    Delete a saved item
    """
    pass


@app.get(
    '/search',
    response_model=SearchGetResponse,
    responses={'500': {'model': ErrorResponse}},
    tags=['listings'],
)
def get_search(
    query: Optional[str] = None,
    limit: Optional[conint(ge=1, le=30)] = 5,
    next: Optional[str] = None,
    price_type: Optional[str] = None,
    lower_price: Optional[int] = None,
    upper_price: Optional[int] = None,
    condition: Optional[str] = None,
    date_range: Optional[str] = None,
) -> Union[SearchGetResponse, ErrorResponse]:
    """
    search listings
    """
    pass


@app.put(
    '/settings',
    response_model=SettingsPutResponse,
    responses={
        '422': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['settings'],
)
def put_settings(body: SettingsPutRequest) -> Union[SettingsPutResponse, ErrorResponse]:
    """
    Update user settings
    """
    pass


@app.post(
    '/sign-up',
    response_model=None,
    responses={
        '201': {'model': SignUpPostResponse},
        '400': {'model': ErrorResponse},
        '409': {'model': ErrorResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['authentication'],
)
def post_sign_up(
    body: SignUpPostRequest,
) -> Optional[Union[SignUpPostResponse, ErrorResponse]]:
    """
    Sign up a new user
    """
    pass


@app.get(
    '/user',
    response_model=UserGetResponse,
    responses={
        '400': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '422': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['user'],
)
def get_user(user_id: str) -> Union[UserGetResponse, ErrorResponse]:
    """
    Get user details
    """
    pass


@app.put(
    '/user',
    response_model=None,
    responses={
        '201': {'model': UserGetResponse},
        '400': {'model': ErrorResponse},
        '403': {'model': ErrorResponse},
        '404': {'model': ErrorResponse},
        '500': {'model': ErrorResponse},
    },
    tags=['user'],
)
def put_user(body: UserPutRequest) -> Optional[Union[UserGetResponse, ErrorResponse]]:
    """
    Update User details
    """
    pass
